Search.setIndex({docnames:["index","sage/logic/booleval","sage/logic/boolformula","sage/logic/logic","sage/logic/logicparser","sage/logic/logictable","sage/logic/propcalc"],envversion:{"sphinx.domains.c":1,"sphinx.domains.changeset":1,"sphinx.domains.cpp":1,"sphinx.domains.javascript":1,"sphinx.domains.math":2,"sphinx.domains.python":1,"sphinx.domains.rst":1,"sphinx.domains.std":1,"sphinx.ext.todo":1,sphinx:55},filenames:["index.rst","sage/logic/booleval.rst","sage/logic/boolformula.rst","sage/logic/logic.rst","sage/logic/logicparser.rst","sage/logic/logictable.rst","sage/logic/propcalc.rst"],objects:{"sage.logic":{booleval:[1,0,0,"-"],boolformula:[2,0,0,"-"],logic:[3,0,0,"-"],logicparser:[4,0,0,"-"],logictable:[5,0,0,"-"],propcalc:[6,0,0,"-"]},"sage.logic.booleval":{eval_f:[1,1,1,""],eval_formula:[1,1,1,""],eval_op:[1,1,1,""]},"sage.logic.boolformula":{BooleanFormula:[2,2,1,""]},"sage.logic.boolformula.BooleanFormula":{add_statement:[2,3,1,""],convert_cnf:[2,3,1,""],convert_cnf_recur:[2,3,1,""],convert_cnf_table:[2,3,1,""],convert_expression:[2,3,1,""],convert_opt:[2,3,1,""],dist_not:[2,3,1,""],dist_ors:[2,3,1,""],equivalent:[2,3,1,""],evaluate:[2,3,1,""],full_tree:[2,3,1,""],get_bit:[2,3,1,""],get_next_op:[2,3,1,""],iff:[2,3,1,""],ifthen:[2,3,1,""],implies:[2,3,1,""],is_contradiction:[2,3,1,""],is_satisfiable:[2,3,1,""],is_tautology:[2,3,1,""],polish_notation:[2,3,1,""],reduce_op:[2,3,1,""],satformat:[2,3,1,""],to_infix:[2,3,1,""],tree:[2,3,1,""],truthtable:[2,3,1,""]},"sage.logic.logic":{SymbolicLogic:[3,2,1,""],eval:[3,1,1,""],eval_and_op:[3,1,1,""],eval_bin_op:[3,1,1,""],eval_iff_op:[3,1,1,""],eval_ifthen_op:[3,1,1,""],eval_ltor_toks:[3,1,1,""],eval_mon_op:[3,1,1,""],eval_or_op:[3,1,1,""],get_bit:[3,1,1,""],reduce_bins:[3,1,1,""],reduce_monos:[3,1,1,""],tokenize:[3,1,1,""]},"sage.logic.logic.SymbolicLogic":{combine:[3,3,1,""],print_table:[3,3,1,""],prove:[3,3,1,""],simplify:[3,3,1,""],statement:[3,3,1,""],truthtable:[3,3,1,""]},"sage.logic.logicparser":{apply_func:[4,1,1,""],get_trees:[4,1,1,""],parse:[4,1,1,""],parse_ltor:[4,1,1,""],polish_parse:[4,1,1,""],prefix_to_infix:[4,1,1,""],recover_formula:[4,1,1,""],recover_formula_internal:[4,1,1,""],to_infix_internal:[4,1,1,""],tokenize:[4,1,1,""],tree_parse:[4,1,1,""]},"sage.logic.logictable":{Truthtable:[5,2,1,""]},"sage.logic.logictable.Truthtable":{get_table_list:[5,3,1,""]},"sage.logic.propcalc":{consistent:[6,1,1,""],formula:[6,1,1,""],get_formulas:[6,1,1,""],valid_consequence:[6,1,1,""]}},objnames:{"0":["py","module","Python module"],"1":["py","function","Python function"],"2":["py","class","Python class"],"3":["py","method","Python method"]},objtypes:{"0":"py:module","1":"py:function","2":"py:class","3":"py:method"},terms:{"3fe":3,"boolean":[0,3,5,6],"case":2,"class":[2,3,5],"default":[2,3,4,5],"function":[2,3,4],"import":[1,2,3,4,5],"int":3,"long":2,"new":[2,3,4],"return":[1,2,3,4,5,6],"switch":4,"true":[1,2,3,4,5,6],"var":3,"while":2,AND:3,And:[2,6],For:5,NOT:3,That:4,The:[1,2,3,4,5,6],abid:[2,6],abra:2,accept:5,accord:1,add_stat:2,added:[2,4,6],algebra:[2,6],algorithm:3,alias:2,along:[2,5],alpha:3,alphanumer:[2,6],alreadi:2,also:[2,3,6],alwai:2,amount:[2,5],ani:[2,5],anoth:2,appear:[2,3,4,5],appli:[2,3,4,6],apply_func:[2,4],arbitrari:5,arg:3,argument:[2,4,5],arrai:[2,3,5],assign:[1,2],associ:2,atom:4,author:[1,2,3,4,5,6],bad:[2,6],base:[2,3,5],been:2,begin:[2,5,6],being:[2,4],benchmark:2,binari:[2,3,4,5],bit:[2,3],blow:2,bool_opt:2,booleanformula:[2,4,6],boolev:[1,6],boolformula:[2,6],boolopt:6,branch:[1,2,4],cadabra:2,calculu:0,call:[2,3,5,6],can:[1,2,3,4,5,6],cancel:4,cannot:2,chang:1,charact:[1,3],check:2,chri:[1,2,3,4,5,6],clean:4,close:2,cnf:2,code:[4,5],column:[2,5],combin:[2,3],come:4,compar:[2,6],compos:4,conjunct:[2,6],consequ:6,consist:[2,3,6],contain:[1,2,3,4,5,6],contradict:[2,3,6],convent:[2,6],convers:2,convert:[2,4,6],convert_cnf:2,convert_cnf_recur:[2,6],convert_cnf_t:[2,6],convert_express:2,convert_opt:2,correspond:[1,2,3,5],count:5,cparen:3,creat:[0,2,3,5,6],creation:[2,3],current:3,demonstr:[4,6],depend:4,descript:2,detail:2,determin:[2,3,6],dictionari:[1,2,3],differ:6,dist_not:2,dist_or:2,distinct:4,distribut:2,docstr:[1,2,3,4,5,6],doe:2,doubl:4,each:[2,4,5],easi:5,effici:4,either:[1,4],element:[1,2],elsewher:4,end:[2,3,5,6],entir:2,entri:4,equal:[2,6],equival:[2,5,6],error:[2,3,4,5,6],espresso:3,essenti:5,eval:3,eval_and_op:3,eval_bin_op:3,eval_f:1,eval_formula:1,eval_iff_op:3,eval_ifthen_op:3,eval_ltor_tok:3,eval_mon_op:3,eval_op:1,eval_or_op:3,evalu:[0,2,3,4,6],everi:2,examin:2,exampl:[1,2,3,4,5,6],exclus:2,exp:2,explicitli:[2,6],exponenti:[2,3],express:[0,2,4,5,6],fals:[1,2,3,4,5,6],find:[2,4,5],first:[2,3],follow:[2,3,4,6],form:[0,2,6],format:[1,2,3,4,5,6],formula:[0,3,5,6],found:3,from:[2,3,4,6],front:3,full:[2,4,6],full_tre:[2,4],func:4,get:5,get_bit:[2,3],get_formula:6,get_next_op:2,get_table_list:5,get_tre:4,given:[1,2,3,5,6],global:[3,5],gorecki:[1,2,3,4,5,6],gracefulli:2,greenberg:6,guarante:2,handl:[2,4],has:2,have:2,high:2,his:3,hline:5,hoo:2,how:[1,2,3,4,5],human:[2,5],identifi:[2,6],iff:2,ifthen:[2,6],illustr:[1,2,3,4,5,6],implement:3,impli:2,includ:2,inclus:2,increas:2,index:[0,2],infer:4,infix:[2,4],initi:[1,2,3,4,5,6],inner:3,input:[1,2,3,4,5,6],instanc:[2,4,5,6],integ:[2,3,4],integr:3,intern:[3,4],invalid:[2,3,6],involv:2,is_contradict:[2,6],is_satisfi:[2,6],is_tautolog:[2,6],issu:2,its:[2,3,5],kei:[1,3],lambda:4,larg:2,last:[2,3,6],latex:5,lead:[2,6],left:3,length:[3,4],letex:5,letter:[2,3,6],librari:3,like:5,list:[1,2,3,4,5,6],llll:5,log:3,logic:[1,2,4,6],logicpars:[2,4,6],logict:[2,5,6],longer:5,look:5,low:2,lrtok:3,lval:3,made:2,mai:[2,4,6],make:2,malform:[2,3,6],man:[2,5],manipul:[2,3],meant:4,method:[2,3],michael:6,modifi:[0,1],modul:[0,2],monkei:[2,5],monoton:3,more:4,most:[2,3,4,6],multipl:4,must:[2,3,6],name:[2,3,5,6],nameerror:[2,6],necessarili:2,neg:[2,5],negat:4,nest:[2,4],next:2,node:4,none:[2,3,4],nonsens:5,nor:2,normal:[2,6],notat:2,note:2,notimplementederror:3,now:[2,3,4,6],number:[2,3],numer:[3,5],object:[2,3,5],occur:[2,4,5],off:5,onc:[2,5],one:[2,4,5],onli:[2,3,5,6],oparen:3,oper:[1,2,3,4,6],order:[2,3,4,5,6],origin:2,other:[2,3,6],our:1,out:2,output:[1,2,3,4,5,6],over:2,page:[0,5],pair:[2,3,4],paramet:[2,3,4],parenthes:[2,3,6],pars:[0,1,2,6],parse_ltor:4,part:3,pase:4,pass:[2,4],paul:[1,2,3,4,5,6],perform:[2,4],place:3,pleas:2,pointer:3,polish:[2,4],polish_not:2,polish_pars:4,popul:3,possibl:6,prase:4,prefer:2,prefix:[2,4],prefix_to_infix:4,prefix_tre:4,previou:4,print:[3,5],print_tabl:3,privat:5,produc:4,proof:4,prop:2,propcalc:[2,4,5,6],proposit:0,prove:3,provid:5,purpos:4,python:4,rang:[2,5],recent:[2,3,6],recov:4,recover_formula:4,recover_formula_intern:4,recoveri:4,reduce_bin:3,reduce_mono:3,reduce_op:2,relat:4,reli:3,repeat:4,replac:3,repres:[1,2,3,4],represent:[2,4,5,6],requir:[2,3],respect:3,result:[1,2,3],right:[2,3],row:[2,3],rule:2,run:5,rval:3,sage:[1,2,3,4,5,6],sat:2,satformat:2,satisfi:[2,6],satlib:2,screen:5,scurek:[1,2,3,4,5,6],search:0,second:[3,5],see:[2,3],self:2,semant:[2,4,6],sent:[2,3],set:[2,3,4,6],shorten:3,should:2,show:[2,5,6],side:[1,2],simpl:4,simplifi:[3,4],singl:[2,3,4],size:2,some:[2,6],space:2,start:[2,3,6],statement1:3,statement2:3,statement:[2,3,4,5,6],stein:[3,5],store:5,str:2,string:[1,2,3,4,6],symboliclog:3,syntact:[2,4],syntax:[2,3,4,6],syntaxerror:[2,6],tabl:[2,3,6],tabular:5,tack:3,take:[2,3],taken:[2,3],tautolog:[2,3,6],test:3,than:5,thei:[2,3,4],them:2,thi:[1,2,3,4,5,6],three:[1,3],thu:5,time:[2,3],to_infix:2,to_infix_intern:4,togeth:3,tok:[3,4],token:[3,4],traceback:[2,3,6],trail:[2,6],tree:[0,1,2,6],tree_pars:4,truth:[2,3,4,5,6],truthtabl:[2,3,5,6],tupl:2,turn:[2,4],two:[2,3,4],typic:2,ubc:2,unari:4,underscor:[2,3,6],unless:[2,4],updat:[1,2,3,4,5,6],use:[2,3,4,5],used:[2,3,4,5,6],uses:4,valid:6,valid_consequ:6,valu:[1,2,3,4,5,6],var_valu:2,vari:2,variabl:[1,2,3,4,5,6],vars_ord:3,vdict:1,version:[1,2,3,4,5,6],wai:6,well:[0,2],were:3,when:[2,3,4,5],where:[2,3,4,5],which:[2,3,4,5],whole:3,william:[3,5],work:2,worst:2,would:5,www:2,xor:[2,6]},titles:["Symbolic Logic","Evaluation of Boolean Formulas","Boolean Formulas","Symbolic Logic Expressions","Module that creates and modifies parse trees of well formed boolean formulas.","Logic Tables","Propositional Calculus"],titleterms:{"boolean":[1,2,4],calculu:6,creat:4,evalu:1,express:3,form:4,formula:[1,2,4],indic:0,logic:[0,3,5],modifi:4,modul:4,pars:4,proposit:6,symbol:[0,3],tabl:[0,5],todo:3,tree:4,well:4}})